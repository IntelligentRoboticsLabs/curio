<!-- Launch the base controller node

Parameters
    classifier_filename : str
        The full filepath for the `scikit-learn` classifier model.
    classifier_window : int
        The size of the classifier window, this sets the number of
        entries in the servo history used to train the classifier.
        The classifier and regressor models must correspond to this
        setting. (default 10)
    regressor_filename : str
        The full filepath for the `scikit-learn` regressor model.
    model : str
        The full filepath to the URDF robot description
    port : str
        The device name for the serial port
-->
<launch>
    <arg name="model" default="$(find curio_description)/urdf/curio.urdf.xacro" />
    <arg name="port" default="/dev/ttyUSB0" />
    <arg name="classifier_filename" default="$(find curio_base)/data/lx16a_tree_classifier.joblib" />
    <arg name="classifier_window" default="10" />
    <arg name="regressor_filename" default="$(find curio_base)/data/lx16a_tree_regressor.joblib" />

    <!-- Controller for the mobile base  -->
    <node pkg="curio_base" type="curio_base_controller" name="curio_base_controller"
        respawn="true" output="screen">
        <param name="classifier_filename" value="$(arg classifier_filename)" />
        <param name="classifier_window" value="$(arg classifier_window)" />
        <param name="regressor_filename" value="$(arg regressor_filename)" />
        <rosparam command="load" file="$(find curio_base)/config/base_controller.yaml" />
        <rosparam subst_value="true">
            port: $(arg port)
        </rosparam>
    </node>

    <!-- EITHER (use when we have ros_control integrated into curio_base -->
    <!-- Controllers and localisation -->
    <!-- <include file="$(find curio_control)/launch/control.launch" /> -->

    <!-- OR (use with the python base_controller) -->
     <!-- Load the robot description -->
    <include file="$(find curio_description)/launch/description.launch">
        <arg name="model" value="$(arg model)" />
    </include>

    <!-- Publish joint states

        Publish the joint states to the topic /joint_states.

        @NOTE: we use the joint state publisher to publish sensor_msgs/JointState messages
        to the topic /joint_states as an interim measure since the base_controller node 
        does not yet publish the data.
    -->
    <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher" >
        <param name="use_gui" value="false" />
        <param name="publish_default_positions" value="true" />
        <param name="publish_default_velocities" value="true" />
    </node>

    <!-- EKF localization
        The robot_localization node also broadcasts the transform from:
            odom -> base_link

        Note: when using EKF localiztion with base_controller (i.e. not ros_control):
            1. ensure the base_controller publishes odometry to base_controller/odom
            2. disable the base_controller from broadcasting the tf for odom -> base_link
    -->    
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_local">
        <rosparam command="load" file="$(find curio_control)/config/ekf_localization_local.yaml" />
    </node>

    <!-- Publish robot state
    
        Publish the robot state and transforms to topics /tf and /tf_static.
    -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />

</launch>